// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ParqueDiversion.Entities.Entities;

#nullable disable

namespace ParqueDiversion.DataAccess.Context
{
    public partial class DbparqueatraccionesContext : DbContext
    {
        public DbparqueatraccionesContext()
        {
        }

        public DbparqueatraccionesContext(DbContextOptions<DbparqueatraccionesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_Departamentos> VW_Departamentos { get; set; }
        public virtual DbSet<VW_EstadosCiviles> VW_EstadosCiviles { get; set; }
        public virtual DbSet<VW_MetodosPagos> VW_MetodosPagos { get; set; }
        public virtual DbSet<VW_Municipios> VW_Municipios { get; set; }
        public virtual DbSet<VW_Pantallas> VW_Pantallas { get; set; }
        public virtual DbSet<VW_Roles> VW_Roles { get; set; }
        public virtual DbSet<VW_Usuarios> VW_Usuarios { get; set; }
        public virtual DbSet<VW_tbAreas> VW_tbAreas { get; set; }
        public virtual DbSet<VW_tbAtracciones> VW_tbAtracciones { get; set; }
        public virtual DbSet<VW_tbCargos> VW_tbCargos { get; set; }
        public virtual DbSet<VW_tbClientes> VW_tbClientes { get; set; }
        public virtual DbSet<VW_tbClientesRegistrados> VW_tbClientesRegistrados { get; set; }
        public virtual DbSet<VW_tbEmpleados> VW_tbEmpleados { get; set; }
        public virtual DbSet<VW_tbGolosinas> VW_tbGolosinas { get; set; }
        public virtual DbSet<VW_tbHistorialVisitantesAtraccion> VW_tbHistorialVisitantesAtraccion { get; set; }
        public virtual DbSet<VW_tbInsumosQuiosco> VW_tbInsumosQuiosco { get; set; }
        public virtual DbSet<VW_tbQuioscos> VW_tbQuioscos { get; set; }
        public virtual DbSet<VW_tbRegiones> VW_tbRegiones { get; set; }
        public virtual DbSet<VW_tbTicketClientes> VW_tbTicketClientes { get; set; }
        public virtual DbSet<VW_tbTickets> VW_tbTickets { get; set; }
        public virtual DbSet<VW_tbTicketsClienteForInsert> VW_tbTicketsClienteForInsert { get; set; }
        public virtual DbSet<VW_tbVentasQuiosco> VW_tbVentasQuiosco { get; set; }
        public virtual DbSet<VW_tbVentasQuioscoDetalle> VW_tbVentasQuioscoDetalle { get; set; }
        public virtual DbSet<tbAreas> tbAreas { get; set; }
        public virtual DbSet<tbAtracciones> tbAtracciones { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbClientesRegistrados> tbClientesRegistrados { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFilasAtraccion> tbFilasAtraccion { get; set; }
        public virtual DbSet<tbFilasPosiciones> tbFilasPosiciones { get; set; }
        public virtual DbSet<tbGolosinas> tbGolosinas { get; set; }
        public virtual DbSet<tbHistorialFilasPosiciones> tbHistorialFilasPosiciones { get; set; }
        public virtual DbSet<tbHistorialVisitantesAtraccion> tbHistorialVisitantesAtraccion { get; set; }
        public virtual DbSet<tbInsumosQuiosco> tbInsumosQuiosco { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbQuioscos> tbQuioscos { get; set; }
        public virtual DbSet<tbRatings> tbRatings { get; set; }
        public virtual DbSet<tbRegiones> tbRegiones { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbRolesXPantallas> tbRolesXPantallas { get; set; }
        public virtual DbSet<tbTemporizadores> tbTemporizadores { get; set; }
        public virtual DbSet<tbTickets> tbTickets { get; set; }
        public virtual DbSet<tbTicketsCliente> tbTicketsCliente { get; set; }
        public virtual DbSet<tbTipoFilas> tbTipoFilas { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }
        public virtual DbSet<tbVentasQuiosco> tbVentasQuiosco { get; set; }
        public virtual DbSet<tbVentasQuioscoDetalle> tbVentasQuioscoDetalle { get; set; }
        public virtual DbSet<tbVisitantesAtraccion> tbVisitantesAtraccion { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<VW_Departamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Departamentos", "gral");

                entity.Property(e => e.dept_Codigo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.dept_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.dept_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dept_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.dept_Nombre).HasMaxLength(200);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_EstadosCiviles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_EstadosCiviles", "gral");

                entity.Property(e => e.civi_Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.civi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.civi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.civi_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_MetodosPagos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_MetodosPagos", "gral");

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.pago_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pago_ID).ValueGeneratedOnAdd();

                entity.Property(e => e.pago_Nombre).HasMaxLength(200);
            });

            modelBuilder.Entity<VW_Municipios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Municipios", "gral");

                entity.Property(e => e.dept_Codigo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.dept_Nombre).HasMaxLength(200);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.muni_Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre).HasMaxLength(200);
            });

            modelBuilder.Entity<VW_Pantallas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Pantallas", "acce");

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.pant_Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.pant_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_Icono).HasMaxLength(100);

                entity.Property(e => e.pant_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.pant_Identificador).HasMaxLength(100);

                entity.Property(e => e.pant_URL).HasMaxLength(300);
            });

            modelBuilder.Entity<VW_Roles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Roles", "acce");

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.role_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.role_Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_Usuarios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Usuarios", "acce");

                entity.Property(e => e.EsAdmin)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Crea)
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.nombreEmpleado)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.role_Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.usua_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usua_Usuario).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbAreas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbAreas", "parq");

                entity.Property(e => e.area_Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.area_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.area_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_UbicaionReferencia)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.usua_Creador).HasMaxLength(100);

                entity.Property(e => e.usua_Modificar).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbAtracciones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbAtracciones", "parq");

                entity.Property(e => e.area_Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_UbicaionReferencia)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.atra_Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.atra_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.atra_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.atra_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.atra_ReferenciaUbicacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.atra_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.atra_UsuarioModificador_Nombre).HasMaxLength(100);

                entity.Property(e => e.atra_regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_tbCargos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCargos", "parq");

                entity.Property(e => e.carg_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.carg_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.usu_Creador).HasMaxLength(100);

                entity.Property(e => e.usu_Modificador).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbClientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbClientes", "parq");

                entity.Property(e => e.clie_Apellidos)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_DNI)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_Nombres)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.usu_Creador).HasMaxLength(100);

                entity.Property(e => e.usu_Modificador).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbClientesRegistrados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbClientesRegistrados", "parq");

                entity.Property(e => e.clie_Nombres)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.clre_Email).HasMaxLength(300);

                entity.Property(e => e.clre_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.clre_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clre_Usuario)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.usu_Creador).HasMaxLength(100);

                entity.Property(e => e.usu_Modificador).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEmpleados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados", "parq");

                entity.Property(e => e.carg_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.civi_Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Apellidos)
                    .IsRequired()
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.empl_DNI)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Email).HasMaxLength(300);

                entity.Property(e => e.empl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(1203)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Nombres)
                    .IsRequired()
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.empl_PrimerApellido)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_PrimerNombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_SegundoApellido)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_SegundoNombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Telefono)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.empl_UsuarioModificador_Nombre).HasMaxLength(100);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_tbGolosinas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbGolosinas", "parq");

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.golo_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.golo_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.golo_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.golo_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.golo_UsuarioModificador_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbHistorialVisitantesAtraccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbHistorialVisitantesAtraccion", "fila");

                entity.Property(e => e.atra_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.hiat_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.hiat_FechaFiltro).HasColumnType("date");

                entity.Property(e => e.hiat_FechaModificacion).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_tbInsumosQuiosco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbInsumosQuiosco", "parq");

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.golo_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.insu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.insu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.insu_UsuarioModificador_Nombre).HasMaxLength(100);

                entity.Property(e => e.quio_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_ReferenciaUbicacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_area_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_empl_NombreCompleto)
                    .HasMaxLength(1203)
                    .IsUnicode(false);

                entity.Property(e => e.quio_regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_tbQuioscos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbQuioscos", "parq");

                entity.Property(e => e.area_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.carg_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Apellidos)
                    .IsRequired()
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.empl_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(1203)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Nombres)
                    .IsRequired()
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.quio_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.quio_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.quio_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_ReferenciaUbicacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.quio_UsuarioModificador_Nombre).HasMaxLength(100);

                entity.Property(e => e.regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_tbRegiones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRegiones", "parq");

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.regi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.regi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.usu_Creador).HasMaxLength(100);

                entity.Property(e => e.usu_Modificador).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbTicketClientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbTicketClientes", "parq");

                entity.Property(e => e.clie_Nombres)
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.pago_Nombre).HasMaxLength(200);

                entity.Property(e => e.tckt_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ticl_FechaCompra).HasColumnType("datetime");

                entity.Property(e => e.ticl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.ticl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ticl_FechaUso).HasColumnType("datetime");

                entity.Property(e => e.usu_Crea).HasMaxLength(100);

                entity.Property(e => e.usu_Modifica).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbTickets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbTickets", "parq");

                entity.Property(e => e.empl_Modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.tckt_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.tckt_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.tckt_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_tbTicketsClienteForInsert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbTicketsClienteForInsert", "parq");

                entity.Property(e => e.clie_Apellidos)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_DNI)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Nombres)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ticl_FechaUso).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_tbVentasQuiosco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbVentasQuiosco", "fact");

                entity.Property(e => e.area_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Apellidos)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_DNI)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Nombres)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Telefono)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.pago_Nombre).HasMaxLength(200);

                entity.Property(e => e.quio_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_ReferenciaUbicacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.vent_ClienteNombreCompleto)
                    .IsRequired()
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.vent_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.vent_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vent_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.vent_UsuarioModificador_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbVentasQuioscoDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbVentasQuioscoDetalle", "fact");

                entity.Property(e => e.deta_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.deta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deta_UsuarioCreador_Nombre).HasMaxLength(100);

                entity.Property(e => e.deta_UsuarioModificador_Nombre).HasMaxLength(100);

                entity.Property(e => e.empl_crea)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.empl_modifica)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.golo_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbAreas>(entity =>
            {
                entity.HasKey(e => e.area_ID)
                    .HasName("PK_parq_tbAreas_area_ID");

                entity.ToTable("tbAreas", "parq");

                entity.HasIndex(e => e.area_Nombre, "UQ_parq_tbAreas_area_Nombre")
                    .IsUnique();

                entity.Property(e => e.area_Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.area_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.area_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.area_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.area_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.area_UbicaionReferencia)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.regi)
                    .WithMany(p => p.tbAreas)
                    .HasForeignKey(d => d.regi_ID)
                    .HasConstraintName("FK_parq_tbAreas_tbRegiones_regi_ID");
            });

            modelBuilder.Entity<tbAtracciones>(entity =>
            {
                entity.HasKey(e => e.atra_ID)
                    .HasName("PK_parq_tbAtracciones_atra_ID");

                entity.ToTable("tbAtracciones", "parq");

                entity.Property(e => e.atra_Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.atra_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.atra_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.atra_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.atra_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.atra_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.atra_ReferenciaUbicacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.area)
                    .WithMany(p => p.tbAtracciones)
                    .HasForeignKey(d => d.area_ID)
                    .HasConstraintName("FK_parq_tbAtracciones_tbAreas_area_ID");

                entity.HasOne(d => d.regi)
                    .WithMany(p => p.tbAtracciones)
                    .HasForeignKey(d => d.regi_ID)
                    .HasConstraintName("FK_parq_tbAtracciones_tbRegiones_regi_ID");
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_ID)
                    .HasName("PK_parq_tbCargos_carg_ID");

                entity.ToTable("tbCargos", "parq");

                entity.HasIndex(e => e.carg_Nombre, "UQ_parq_tbCargos_carg_Nombre")
                    .IsUnique();

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.carg_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_ID)
                    .HasName("PK_parq_tbClientes_clie_ID");

                entity.ToTable("tbClientes", "parq");

                entity.HasIndex(e => e.clie_DNI, "UQ_parq_tbClientes_clie_DNI")
                    .IsUnique();

                entity.HasIndex(e => e.clie_Telefono, "UQ_parq_tbClientes_clie_Telefono")
                    .IsUnique();

                entity.Property(e => e.clie_Apellidos)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_DNI)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_Nombres)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_UsuarioCreador).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tbClientesRegistrados>(entity =>
            {
                entity.HasKey(e => e.clre_ID)
                    .HasName("PK_parq_tbClientesRegistrados_clre_ID");

                entity.ToTable("tbClientesRegistrados", "parq");

                entity.HasIndex(e => e.clre_Email, "UQ_parq_tbClientesRegistrados_clre_Email")
                    .IsUnique();

                entity.HasIndex(e => e.clre_Usuario, "UQ_parq_tbClientesRegistrados_clre_Usuario")
                    .IsUnique();

                entity.Property(e => e.clre_Email).HasMaxLength(300);

                entity.Property(e => e.clre_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clre_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clre_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clre_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clre_Usuario)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbClientesRegistrados)
                    .HasForeignKey(d => d.clie_ID)
                    .HasConstraintName("FK_parq_tbClientesRegistrados_tbClientes_clie_ID");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.dept_ID)
                    .HasName("PK_gral_tbDepartamentos_dept_ID");

                entity.ToTable("tbDepartamentos", "gral");

                entity.HasIndex(e => e.dept_Codigo, "UQ_gral_tbDepartamentos_dept_Codigo")
                    .IsUnique();

                entity.HasIndex(e => e.dept_Nombre, "UQ_gral_tbDepartamentos_dept_Nombre")
                    .IsUnique();

                entity.Property(e => e.dept_Codigo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.dept_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.dept_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dept_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dept_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.dept_Nombre).HasMaxLength(200);

                entity.Property(e => e.dept_UsuarioCreador).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empl_ID)
                    .HasName("PK_parq_tbEmpleados_empl_ID");

                entity.ToTable("tbEmpleados", "parq");

                entity.HasIndex(e => e.empl_DNI, "UQ_parq_tbEmpleados_empl_DNI")
                    .IsUnique();

                entity.HasIndex(e => e.empl_Telefono, "UQ_parq_tbEmpleados_empl_Telefono")
                    .IsUnique();

                entity.Property(e => e.empl_DNI)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Email).HasMaxLength(300);

                entity.Property(e => e.empl_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.empl_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.empl_PrimerApellido)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_PrimerNombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_SegundoApellido)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_SegundoNombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Telefono)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_UsuarioCreador).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_ID)
                    .HasConstraintName("FK_parq_tbEmpleados_tbCargos_carg_ID");

                entity.HasOne(d => d.civi)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.civi_ID)
                    .HasConstraintName("FK_parq_tbEmpleados_gral_tbEstadosCiviles_civi_ID");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.civi_ID)
                    .HasName("PK_gral_tbEstadosCiviles_civi_ID");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.HasIndex(e => e.civi_Descripcion, "UQ_gral_tbEstadosCiviles_civi_Descripcion")
                    .IsUnique();

                entity.Property(e => e.civi_Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.civi_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.civi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.civi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.civi_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.civi_UsuarioCreador).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tbFilasAtraccion>(entity =>
            {
                entity.HasKey(e => e.fiat_ID)
                    .HasName("PK_fila_tbFilasAtraccion_fiat_ID");

                entity.ToTable("tbFilasAtraccion", "fila");

                entity.Property(e => e.fiat_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.fiat_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fiat_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.fiat_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.atra)
                    .WithMany(p => p.tbFilasAtraccion)
                    .HasForeignKey(d => d.atra_ID)
                    .HasConstraintName("FK_fila_tbFilasAtraccion_parq_tbAtracciones_atra_ID");

                entity.HasOne(d => d.tifi)
                    .WithMany(p => p.tbFilasAtraccion)
                    .HasForeignKey(d => d.tifi_ID)
                    .HasConstraintName("FK_fila_tbFilasAtraccion_tbTipoFilas_tifi_ID");
            });

            modelBuilder.Entity<tbFilasPosiciones>(entity =>
            {
                entity.HasKey(e => e.fipo_ID)
                    .HasName("PK_fila_tbFilasPosiciones_fipo_ID");

                entity.ToTable("tbFilasPosiciones", "fila");

                entity.HasOne(d => d.fiat)
                    .WithMany(p => p.tbFilasPosiciones)
                    .HasForeignKey(d => d.fiat_ID)
                    .HasConstraintName("FK_fila_tbFilasPosiciones_tbFilasAtraccion_fiat_ID");

                entity.HasOne(d => d.ticl)
                    .WithMany(p => p.tbFilasPosiciones)
                    .HasForeignKey(d => d.ticl_ID)
                    .HasConstraintName("FK_fila_tbFilasPosiciones_parq_tbTicketsCliente_ticl_ID");
            });

            modelBuilder.Entity<tbGolosinas>(entity =>
            {
                entity.HasKey(e => e.golo_ID)
                    .HasName("PK_parq_tbGolosinas_golo_ID");

                entity.ToTable("tbGolosinas", "parq");

                entity.HasIndex(e => e.golo_Nombre, "UQ_parq_tbGolosinas_golo_Nombre")
                    .IsUnique();

                entity.Property(e => e.golo_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.golo_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.golo_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.golo_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.golo_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbHistorialFilasPosiciones>(entity =>
            {
                entity.HasKey(e => e.hipo_ID)
                    .HasName("PK_fila_tbHistorialFilasPosiciones_hipo_ID");

                entity.ToTable("tbHistorialFilasPosiciones", "fila");

                entity.Property(e => e.hipo_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.hipo_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.hipo_FechaIngreso).HasColumnType("datetime");

                entity.Property(e => e.hipo_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.hipo_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fiat)
                    .WithMany(p => p.tbHistorialFilasPosiciones)
                    .HasForeignKey(d => d.fiat_ID)
                    .HasConstraintName("FK_fila_tbHistorialFilasPosiciones_tbFilasAtraccion_fiat_ID");

                entity.HasOne(d => d.ticl)
                    .WithMany(p => p.tbHistorialFilasPosiciones)
                    .HasForeignKey(d => d.ticl_ID)
                    .HasConstraintName("FK_fila_tbHistorialFilasPosiciones_parq_tbTicketsCliente_ticl_ID");
            });

            modelBuilder.Entity<tbHistorialVisitantesAtraccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbHistorialVisitantesAtraccion", "fila");

                entity.Property(e => e.hiat_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.hiat_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.hiat_FechaFiltro).HasColumnType("date");

                entity.Property(e => e.hiat_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.hiat_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.hiat_ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<tbInsumosQuiosco>(entity =>
            {
                entity.HasKey(e => e.insu_ID)
                    .HasName("PK_parq_tbInsumosQuiosco_insu_ID");

                entity.ToTable("tbInsumosQuiosco", "parq");

                entity.Property(e => e.insu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.insu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.insu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.golo)
                    .WithMany(p => p.tbInsumosQuiosco)
                    .HasForeignKey(d => d.golo_ID)
                    .HasConstraintName("FK_parq_tbInsumosQuiosco_tbGolosinas_golo_ID");

                entity.HasOne(d => d.quio)
                    .WithMany(p => p.tbInsumosQuiosco)
                    .HasForeignKey(d => d.quio_ID)
                    .HasConstraintName("FK_parq_tbInsumosQuioscos_tbQuioscos_quio_ID");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.pago_ID)
                    .HasName("PK_gral_tbMetodosPago_pago_ID");

                entity.ToTable("tbMetodosPago", "gral");

                entity.HasIndex(e => e.pago_Nombre, "UQ_gral_tbMetodosPago_pago_Nombre")
                    .IsUnique();

                entity.Property(e => e.pago_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pago_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pago_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pago_Nombre).HasMaxLength(200);

                entity.Property(e => e.pago_UsuarioCreador).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_ID)
                    .HasName("PK_gral_tbMunicipios_muni_ID");

                entity.ToTable("tbMunicipios", "gral");

                entity.HasIndex(e => e.muni_Codigo, "UQ_gral_tbMunicipios_muni_Codigo")
                    .IsUnique();

                entity.Property(e => e.muni_Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_Nombre).HasMaxLength(200);

                entity.Property(e => e.muni_UsuarioCreador).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.dept_ID)
                    .HasConstraintName("FK_gral_tbMunicipios_tbDepartamentos_dept_ID");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_ID)
                    .HasName("PK_acce_tbPantallas_pant_ID");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.pant_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlID).HasMaxLength(300);

                entity.Property(e => e.pant_Icono).HasMaxLength(100);

                entity.Property(e => e.pant_Identificador).HasMaxLength(100);

                entity.Property(e => e.pant_Menu).HasMaxLength(300);

                entity.Property(e => e.pant_URL).HasMaxLength(300);

                entity.Property(e => e.pant_UsuarioCreador).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tbQuioscos>(entity =>
            {
                entity.HasKey(e => e.quio_ID)
                    .HasName("PK_parq_tbQuioscos_quio_ID");

                entity.ToTable("tbQuioscos", "parq");

                entity.Property(e => e.quio_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.quio_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.quio_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.quio_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.quio_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.quio_ReferenciaUbicacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.area)
                    .WithMany(p => p.tbQuioscos)
                    .HasForeignKey(d => d.area_ID)
                    .HasConstraintName("FK_parq_tbQuioscos_tbAreas_area_ID");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbQuioscos)
                    .HasForeignKey(d => d.empl_ID)
                    .HasConstraintName("FK_parq_tbQuioscos_tbEmpleados_empl_ID");

                entity.HasOne(d => d.regi)
                    .WithMany(p => p.tbQuioscos)
                    .HasForeignKey(d => d.regi_ID)
                    .HasConstraintName("FK_parq_tbQuioscos_tbRegiones_regi_ID");
            });

            modelBuilder.Entity<tbRatings>(entity =>
            {
                entity.HasKey(e => e.rati_ID)
                    .HasName("PK_parq_tbRatings_rati_ID");

                entity.ToTable("tbRatings", "parq");

                entity.Property(e => e.rati_Comentario)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.rati_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.rati_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.rati_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.rati_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.atra)
                    .WithMany(p => p.tbRatings)
                    .HasForeignKey(d => d.atra_ID)
                    .HasConstraintName("FK_parq_tbRatings_tbAtracciones_atra_ID");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbRatings)
                    .HasForeignKey(d => d.clie_ID)
                    .HasConstraintName("FK_parq_tbRatings_tbClientes_clie_ID");
            });

            modelBuilder.Entity<tbRegiones>(entity =>
            {
                entity.HasKey(e => e.regi_ID)
                    .HasName("PK_parq_tbRegiones_regi_ID");

                entity.ToTable("tbRegiones", "parq");

                entity.HasIndex(e => e.regi_Nombre, "UQ_parq_tbRegiones_regi_Nombre")
                    .IsUnique();

                entity.Property(e => e.regi_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.regi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.regi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.regi_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.regi_Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_ID)
                    .HasName("PK_acce_tbRoles_role_ID");

                entity.ToTable("tbRoles", "acce");

                entity.HasIndex(e => e.role_Nombre, "UQ_acce_tbRoles_role_Nombre")
                    .IsUnique();

                entity.Property(e => e.role_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.role_UsuarioCreador).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tbRolesXPantallas>(entity =>
            {
                entity.HasKey(e => e.ropa_ID)
                    .HasName("PK_acce_tbRolesXPantallas_ropa_ID");

                entity.ToTable("tbRolesXPantallas", "acce");

                entity.Property(e => e.ropa_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.ropa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ropa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ropa_UsuarioCreador).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbRolesXPantallas)
                    .HasForeignKey(d => d.pant_ID)
                    .HasConstraintName("FK_acce_tbRolesXPantallas_tbPantallas_pant_ID");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbRolesXPantallas)
                    .HasForeignKey(d => d.role_ID)
                    .HasConstraintName("FK_acce_tbRolesXPantallas_tbRoles_role_ID");
            });

            modelBuilder.Entity<tbTemporizadores>(entity =>
            {
                entity.HasKey(e => e.temp_ID)
                    .HasName("PK_fila_tbTemporizadores_temp_ID");

                entity.ToTable("tbTemporizadores", "fila");

                entity.Property(e => e.temp_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.temp_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.temp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.temp_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.atra)
                    .WithMany(p => p.tbTemporizadores)
                    .HasForeignKey(d => d.atra_ID)
                    .HasConstraintName("FK_fila_tbTemporizadores_tbAtracciones_atra_ID");

                entity.HasOne(d => d.ticl)
                    .WithMany(p => p.tbTemporizadores)
                    .HasForeignKey(d => d.ticl_ID)
                    .HasConstraintName("FK_fila_tbTemporizadores_parq_tbTicketsCliente");
            });

            modelBuilder.Entity<tbTickets>(entity =>
            {
                entity.HasKey(e => e.tckt_ID)
                    .HasName("PK_parq_tbTickets_tckt_ID");

                entity.ToTable("tbTickets", "parq");

                entity.HasIndex(e => e.tckt_Nombre, "UQ_parq_tbTickets_tckt_Nombre")
                    .IsUnique();

                entity.Property(e => e.tckt_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tckt_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tckt_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.tckt_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tckt_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbTicketsCliente>(entity =>
            {
                entity.HasKey(e => e.ticl_ID)
                    .HasName("PK_parq_tbTicketsCliente_ticl_ID");

                entity.ToTable("tbTicketsCliente", "parq");

                entity.Property(e => e.ticl_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.ticl_FechaCompra)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ticl_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ticl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ticl_FechaUso).HasColumnType("datetime");

                entity.Property(e => e.ticl_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbTicketsCliente)
                    .HasForeignKey(d => d.clie_ID)
                    .HasConstraintName("FK_parq_tbTicletsCliente_tbClientes_clie_ID");

                entity.HasOne(d => d.pago)
                    .WithMany(p => p.tbTicketsCliente)
                    .HasForeignKey(d => d.pago_ID)
                    .HasConstraintName("FK_parq_tbTicketsCliente_gral_tbMetodosPago_pago_ID");

                entity.HasOne(d => d.tckt)
                    .WithMany(p => p.tbTicketsCliente)
                    .HasForeignKey(d => d.tckt_ID)
                    .HasConstraintName("FK_parq_tbTicketsCliente_tbTickets_tckt_ID");
            });

            modelBuilder.Entity<tbTipoFilas>(entity =>
            {
                entity.HasKey(e => e.tifi_ID)
                    .HasName("PK_fila_tbTipoFilas_tifi_ID");

                entity.ToTable("tbTipoFilas", "fila");

                entity.Property(e => e.tifi_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tifi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tifi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.tifi_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tifi_Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.usua_ID)
                    .HasName("PK_acce_tbUsuarios_usua_ID");

                entity.ToTable("tbUsuarios", "acce");

                entity.HasIndex(e => e.usua_Usuario, "UQ_acce_tbUsuarios_usua_Usuario")
                    .IsUnique();

                entity.Property(e => e.usua_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.usua_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usua_Habilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.usua_Usuario).HasMaxLength(100);
            });

            modelBuilder.Entity<tbVentasQuiosco>(entity =>
            {
                entity.HasKey(e => e.vent_ID)
                    .HasName("PK_fact_tbVentasQuiosco_vent_ID");

                entity.ToTable("tbVentasQuiosco", "fact");

                entity.Property(e => e.vent_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.vent_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.vent_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vent_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbVentasQuiosco)
                    .HasForeignKey(d => d.clie_ID)
                    .HasConstraintName("FK_fact_tbVentasQuiosco_parq_tbClientes_clie_ID");

                entity.HasOne(d => d.pago)
                    .WithMany(p => p.tbVentasQuiosco)
                    .HasForeignKey(d => d.pago_ID)
                    .HasConstraintName("FK_fact_tbVentasQuiosco_gral_tbMetodosPago_pago_ID");

                entity.HasOne(d => d.quio)
                    .WithMany(p => p.tbVentasQuiosco)
                    .HasForeignKey(d => d.quio_ID)
                    .HasConstraintName("FK_fact_tbVentasQuiosco_tbQuioscos_quio_ID");
            });

            modelBuilder.Entity<tbVentasQuioscoDetalle>(entity =>
            {
                entity.HasKey(e => e.deta_ID)
                    .HasName("PK_fact_tbVentasQuioscoDetalle_deta_ID");

                entity.ToTable("tbVentasQuioscoDetalle", "fact");

                entity.Property(e => e.deta_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.deta_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.deta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deta_Habilitado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.insu)
                    .WithMany(p => p.tbVentasQuioscoDetalle)
                    .HasForeignKey(d => d.insu_ID)
                    .HasConstraintName("FK_fact_tbVentasQuioscoDetalle_tbInsumosQuiosco_insu_ID");

                entity.HasOne(d => d.vent)
                    .WithMany(p => p.tbVentasQuioscoDetalle)
                    .HasForeignKey(d => d.vent_ID)
                    .HasConstraintName("FK_fact_tbVentasQuioscoDetalle_tbVentasQuiosco_vent_ID");
            });

            modelBuilder.Entity<tbVisitantesAtraccion>(entity =>
            {
                entity.HasKey(e => e.viat_ID)
                    .HasName("PK_fila_tbVisitantesAtraccion_viat_ID");

                entity.ToTable("tbVisitantesAtraccion", "fila");

                entity.HasOne(d => d.atra)
                    .WithMany(p => p.tbVisitantesAtraccion)
                    .HasForeignKey(d => d.atra_ID)
                    .HasConstraintName("FK_fila_tbVisitantesAtraccion_parq_tbAtracciones_atra_ID");

                entity.HasOne(d => d.ticl)
                    .WithMany(p => p.tbVisitantesAtraccion)
                    .HasForeignKey(d => d.ticl_ID)
                    .HasConstraintName("FK_fila_tbVisitantesAtraccion_parq_tbTicketsCliente_ticl_ID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}